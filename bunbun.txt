import tkinter as tk
from tkinter import messagebox
import requests

# Funcția pentru a obține ratele de schimb
# Se folosesc câteva valute comune
def fetch_exchange_rates():
    try:
        response = requests.get("https://api.exchangerate-api.com/v4/latest/USD")
        data = response.json()
        return {
            "USD": data["rates"].get("USD", 1),
            "EUR": data["rates"].get("EUR", 0.91),
            "GBP": data["rates"].get("GBP", 0.77),
            "RON": data["rates"].get("RON", 4.95),
            "JPY": data["rates"].get("JPY", 113.5),
            "AUD": data["rates"].get("AUD", 1.34),
            "CAD": data["rates"].get("CAD", 1.25),
            "CHF": data["rates"].get("CHF", 0.92),
            "CNY": data["rates"].get("CNY", 6.45),
            "INR": data["rates"].get("INR", 74.5)
        }
    except:
        messagebox.showerror("Eroare", "Nu s-au putut încărca ratele de schimb.")
        return {
            "USD": 1, "EUR": 0.91, "GBP": 0.77, "RON": 4.95,
            "JPY": 113.5, "AUD": 1.34, "CAD": 1.25, "CHF": 0.92, "CNY": 6.45, "INR": 74.5
        }

# Funcția de conversie
# Transformă suma dintr-o valută în alta
def convert_currency():
    try:
        amount = float(entry_amount.get())  # Preluăm suma
        from_currency = from_currency_var.get()  # Valuta inițială
        to_currency = to_currency_var.get()  # Valuta țintă

        if from_currency == to_currency:
            result = amount
        else:
            result = amount / rates[from_currency] * rates[to_currency]

        label_result.config(text=f"{amount:.2f} {from_currency} = {result:.2f} {to_currency}")
    except ValueError:
        messagebox.showerror("Eroare", "Introduceti o suma valida.")

# Obținem ratele de schimb
rates = fetch_exchange_rates()

# Creăm fereastra principală
root = tk.Tk()
root.title("Convertor Valutar")
root.geometry("400x400")
root.configure(bg="#0131B4")

# Titlul aplicației
title_label = tk.Label(root, text="Convertor Valutar", font=("Arial", 20, "bold"), bg="#0131B4", fg="white")
title_label.pack(pady=10)

# Introducerea sumei
entry_label = tk.Label(root, text="Introduceti suma:",font=("Arial", 14), bg="#0131B4", fg="white")
entry_label.pack()
entry_amount = tk.Entry(root, font=("Arial", 12), justify="center")
entry_amount.pack(pady=5)
entry_amount.bind("<Return>", lambda event: convert_currency())

# Alegerea valutelor
from_currency_label = tk.Label(root, text="Din:",font=("Arial", 12), bg="#0131B4", fg="white")
from_currency_label.pack()
from_currency_var = tk.StringVar(value="USD")
from_currency_menu = tk.OptionMenu(root, from_currency_var, *rates.keys())
from_currency_menu.pack(pady=5)

to_currency_label = tk.Label(root, text="In:",font=("Arial", 12), bg="#0131B4", fg="white")
to_currency_label.pack()
to_currency_var = tk.StringVar(value="EUR")
to_currency_menu = tk.OptionMenu(root, to_currency_var, *rates.keys())
to_currency_menu.pack(pady=5)

# Butonul de conversie
convert_button = tk.Button(root, text="Convertire", command=convert_currency, font=("Arial", 12), bg="#4CAF50", fg="white")
convert_button.pack(pady=15)

# Rezultatul conversiei
label_result = tk.Label(root, text="", font=("Arial", 14), bg="#0131B4", fg="white")
label_result.pack(pady=10)

# Rulăm aplicația
root.mainloop()